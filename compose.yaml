services:
  houdini_base:
    build:
      context: .
      dockerfile: docker/Dockerfile.houdini
      args:
        DOWNLOAD_HOUDINI: "false"
        SIDEFX_CLIENT: "${SIDEFX_CLIENT}"
        SIDEFX_SECRET: "${SIDEFX_SECRET}"
        HFS_VER: "${HFS_VER}"
        # Defines where to install Houdini, can be overriden here.
        HOU_INSTALL_LOCATION: "hou_download"
    image: houdini-base
    container_name: houdini_base
    env_file:
      - .env

  hou_flask_app:
    build:
      context: .
      dockerfile: docker/Dockerfile.flask
    image: flask_app_image
    container_name: flask_container
    ports:
      - "8000:8000"
    volumes:
      - ./nginx:/var/model_storage
      - ./project:/root/hou_webserver
      - shared_hip_storage:/root/hip_storage
      - flask_socket:/run/flask-socket
    env_file:
      - .env
    depends_on:
      - houdini_base
      - redis

  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"

  celery:
    build:
        context: .
        dockerfile: docker/Dockerfile.celery
    volumes:
      - ./nginx:/var/model_storage
      - ./project:/root/hou_webserver
      - shared_hip_storage:/root/hip_storage
    env_file:
      - .env
    depends_on:
      - houdini_base
      - redis
    # Give the celery works access to the nvidia GPUs!
    # Uncomment if using nvidia-container
#    deploy:
#      resources:
#        reservations:
#          devices:
#            - driver: nvidia
#              count: 1
#              capabilities: [gpu]

  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx:/var/www
      - shared_hip_storage:/var/hip_storage
      - flask_socket:/run/flask-socket
    depends_on:
      - hou_flask_app

volumes:
  shared_hip_storage:
  flask_socket:
